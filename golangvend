#!/bin/bash
#
# golangvend - no-bullshit vendoring of Golang dependencies
#
# Copyright 2016 Stefan Majewsky <majewsky@gmx.net>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# golangvend If not, see <http://www.gnu.org/licenses/>.
#

set -euo pipefail
mkdir -p vendor/pins
export GOPATH="$PWD/.golangvend-cache" GOBIN=""

# find external dependencies (the sed/grep foo assumes that gofmt was run!)
# (sed selects import statements, grep selects the lines with package names,
# cut selects just the package names, sed #2 converts vendored imports into the
# original imports, grep #2 selects external packages)
#
# import paths ending in ".pb" are packages autogenerated from Protobuf
# declarations and must be skipped
sed -n '/^import (/,/)/p;/^import "/p' $(find -name .golangvend-cache -prune -o -name '*.go' -print) | grep '"' | cut -d'"' -f2 | sed 's+.*/vendor/++' | grep -E '\w+\.' | grep -v '.pb$' | sort -u | while read imported_path; do
    # get this dependency
    [ -d "$GOPATH/src/$imported_path" ] || go get -d $imported_path
    # we want to vendor the whole external repository, not just the directory
    # inside it that we happen to include, so find the import name of the repo
    imported_path_with_slash="$imported_path/"
    path_inside_repo="$(git -C "$GOPATH/src/$imported_path" rev-parse --show-prefix)"
    echo "${imported_path_with_slash%/$path_inside_repo}"
done | sort -u | while read repo; do
    # allow the user to skip unnecessary transitive dependencies
    SKIPFILE="vendor/skip/${repo//\//_}"
    if [ -f "$SKIPFILE" ]; then
        echo "[ skip ] $repo"
        continue
    fi
    echo "[vendor] $repo"

    # make sure that the cache is up-to-date
    git -C "$GOPATH/src/$repo" fetch origin >/dev/null
    # pin the current version in vendor/pins if there is no pin yet
    PINFILE="vendor/pins/${repo//\//_}"
    [ -f "$PINFILE" ] || git -C "$GOPATH/src/$repo" rev-parse origin/master > "$PINFILE"

    # vendor the source code into the vendor/ directory
    rm -rf -- "vendor/$repo/"
    git -C "$GOPATH/src/$repo" archive --prefix=vendor/$repo/ "$(cat "$PINFILE")" | tar xf -
done
